{"version":3,"sources":["webpack:///./node_modules/@philly/vue-mapping/src/pictometry/ViewCone.vue","webpack:///node_modules/@philly/vue-mapping/src/pictometry/ViewCone.vue","webpack:///./node_modules/@philly/vue-mapping/src/pictometry/ViewCone.vue?cf87"],"names":["render","staticRenderFns","ViewConevue_type_script_lang_js_","name","props","h","computed","ipa","this","$store","state","pictometry","zoom","radius","zoomMap","17","18","19","20","21","22","23","24","mounted","getViewConeLatLon","beforeDestroy","removeShapes","shapeIds","watch","nextRadius","rotationAngle","latlng","methods","camLat","camLon","ER","camR","Angle1","Angle2","parse_float_default","hFov","Math","PI","dnLP","cos","deLP","sin","dnRP","deRP","dLatLP","dLonLP","dLatRP","dLonRP","camRightLat","camRightLon","camLeftLat","camLeftLon","coordinates","y","x","z","placeViewCone","coords","self","viewTriangle","type","SHAPE_TYPE","POLYGON","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","altitudeMode","ALTITUDE_MODE","RELATIVE_TO_GROUND","addShapes","result","i","length","success","alert","error","push","shapeId","slice","pictometry_ViewConevue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__"],"mappings":"wIAAAA,EAAAC,uBCCAC,EAAA,CACAC,KAAA,qBACAC,MAAA,CACA,SACA,gBACA,QAEAJ,OAPA,SAOAK,KAGAC,SAAA,CACAC,IADA,WAEA,OAAAC,KAAAC,OAAAC,MAAAC,WAAAJ,KAEAK,KAJA,WAKA,OAAAJ,KAAAC,OAAAC,MAAAC,WAAAC,MAEAC,OAPA,WAQA,IAAAC,EAAA,CACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,IAEA,OAAAR,EAAAN,KAAAI,QAIAW,QAhCA,WAiCAf,KAAAgB,qBAEAC,cAnCA,WAoCAjB,KAAAD,IAAAmB,aAAAlB,KAAAC,OAAAC,MAAAC,WAAAgB,WAEAC,MAAA,CACAf,OADA,SACAgB,GAQArB,KAAAgB,qBAEAM,cAXA,WAYAtB,KAAAD,IAAAmB,aAAAlB,KAAAC,OAAAC,MAAAC,WAAAgB,UACAnB,KAAAgB,qBAEAO,OAfA,WAgBAvB,KAAAD,IAAAmB,aAAAlB,KAAAC,OAAAC,MAAAC,WAAAgB,UACAnB,KAAAgB,sBAGAQ,QAAA,CACAR,kBADA,WAGA,IAAAS,EAAAzB,KAAAuB,OAAA,GACAG,EAAA1B,KAAAuB,OAAA,GAEAI,EAAA,QAGAC,EAAA5B,KAAAK,OAEAwB,EAAA7B,KAAAsB,cACAQ,EAAA,IAAAC,IAAA/B,KAAAgC,MAAAC,KAAAC,GAEAC,EAAAF,KAAAG,KAAAP,EAAAC,EAAA,GAAAG,KAAAC,GAAA,KAAAN,EACAS,EAAAJ,KAAAK,KAAAT,EAAAC,EAAA,GAAAG,KAAAC,GAAA,KAAAN,EACAW,EAAAN,KAAAG,KAAAP,EAAAC,EAAA,GAAAG,KAAAC,GAAA,KAAAN,EACAY,EAAAP,KAAAK,KAAAT,EAAAC,EAAA,GAAAG,KAAAC,GAAA,KAAAN,EAEAa,EAAAN,EAAAR,EACAe,EAAAL,GAAAV,EAAAM,KAAAG,IAAAH,KAAAC,GAAAT,EAAA,MACAkB,EAAAJ,EAAAZ,EACAiB,EAAAJ,GAAAb,EAAAM,KAAAG,IAAAH,KAAAC,GAAAT,EAAA,MAEAoB,EAAApB,EAAA,IAAAgB,EAAAR,KAAAC,GACAY,EAAApB,EAAA,IAAAgB,EAAAT,KAAAC,GACAa,EAAAtB,EAAA,IAAAkB,EAAAV,KAAAC,GACAc,EAAAtB,EAAA,IAAAkB,EAAAX,KAAAC,GAEAe,EAAA,EAAAC,EAAAzB,EAAA0B,EAAAzB,EAAA0B,EAAA,IAAAF,EAAAL,EAAAM,EAAAL,EAAAM,EAAA,IAAAF,EAAAH,EAAAI,EAAAH,EAAAI,EAAA,IACApD,KAAAqD,cAAAJ,IAGAI,cAAA,SAAAC,GAEA,IAAAC,EAAAvD,KACAwD,EAAA,CACAC,KAAAzD,KAAAD,IAAA2D,WAAAC,QACAV,YAAAK,EAEAM,YAAA,UACAC,cAAA,IACAC,aAAA,EACAC,UAAA,UACAC,YAAA,IACAC,aAAAjE,KAAAD,IAAAmE,cAAAC,oBAEAnE,KAAAD,IAAAqE,UAAA,CAAAZ,GAAA,SAAAa,GACA,QAAAC,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,IACA,aAAAD,EAAAC,GAAAE,QACAC,MAAAJ,EAAAC,GAAAI,WACA,CACA,IAAAvD,EAAAoC,EAAAtD,OAAAC,MAAAC,WAAAgB,SAGAA,EAAAwD,KAAAN,EAAAC,GAAAM,SACAzD,EAAA0D,MAAA,MAEAtB,EAAAxD,IAAAmB,aAAAC,EAAA0D,MAAA,aCrH+SC,EAAA,cFO/SC,EAAgBC,OAAAC,EAAA,KAAAD,CACdF,EACFtF,EACAC,GACA,EACA,KACA,KACA,MAIeyF,EAAA,WAAAH","file":"js/mbmb_pvm_PictometryViewCone.9e32b2dc.js","sourcesContent":["var render, staticRenderFns\nimport script from \"./ViewCone.vue?vue&type=script&lang=js&\"\nexport * from \"./ViewCone.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\r\n  export default {\r\n    name: 'PictometryViewCone',\r\n    props: [\r\n      'latlng',\r\n      'rotationAngle',\r\n      'hFov'\r\n    ],\r\n    render(h) {\r\n      return;\r\n    },\r\n    computed: {\r\n      ipa() {\r\n        return this.$store.state.pictometry.ipa;\r\n      },\r\n      zoom() {\r\n        return this.$store.state.pictometry.zoom;\r\n      },\r\n      radius() {\r\n        const zoomMap = {\r\n          '17': 75,\r\n          '18': 50,\r\n          '19': 25,\r\n          '20': 15,\r\n          '21': 10,\r\n          '22': 10,\r\n          '23': 10,\r\n          '24': 10\r\n        }\r\n        return zoomMap[this.zoom]\r\n        // return zoomMap[this.$store.state.map.zoom]\r\n      }\r\n    },\r\n    mounted() {\r\n      this.getViewConeLatLon();\r\n    },\r\n    beforeDestroy() {\r\n      this.ipa.removeShapes(this.$store.state.pictometry.shapeIds);\r\n    },\r\n    watch: {\r\n      radius(nextRadius) {\r\n        // this.ipa.getMetaData(function(e) {\r\n        //   console.log(e);\r\n        // });\r\n        // this.ipa.getZoomRange(function(e) {\r\n        //   console.log(e);\r\n        // })\r\n        // console.log('radius:', nextRadius);\r\n        this.getViewConeLatLon();\r\n      },\r\n      rotationAngle() {\r\n        this.ipa.removeShapes(this.$store.state.pictometry.shapeIds);\r\n        this.getViewConeLatLon();\r\n      },\r\n      latlng() {\r\n        this.ipa.removeShapes(this.$store.state.pictometry.shapeIds);\r\n        this.getViewConeLatLon();\r\n      },\r\n    },\r\n    methods: {\r\n      getViewConeLatLon() {\r\n        // console.log('getViewConeLatLon is running');\r\n        const camLat = this.latlng[0];\r\n        const camLon = this.latlng[1];\r\n        // Earth's radius\r\n        const ER=6378137;\r\n        // viewcone radius, for scaling its size\r\n        // const camR = 10;\r\n        const camR = this.radius;\r\n        // Angle1 - camera angle off of N, Angle2 - fov angle\r\n        const Angle1 = this.rotationAngle;\r\n        const Angle2 = parseFloat(this.hFov) * 180/Math.PI;\r\n\r\n        const dnLP = Math.cos((Angle1+Angle2/2) * Math.PI/180)*camR;\r\n        const deLP = Math.sin((Angle1+Angle2/2) * Math.PI/180)*camR;\r\n        const dnRP = Math.cos((Angle1-Angle2/2) * Math.PI/180)*camR;\r\n        const deRP = Math.sin((Angle1-Angle2/2) * Math.PI/180)*camR;\r\n        //Coordinate offsets in radians\r\n        const dLatLP = dnLP/ER;\r\n        const dLonLP = deLP/(ER*Math.cos(Math.PI*camLat/180));\r\n        const dLatRP = dnRP/ER;\r\n        const dLonRP = deRP/(ER*Math.cos(Math.PI*camLat/180));\r\n        //OffsetPosition\r\n        const camRightLat = camLat + dLatLP * 180/Math.PI;\r\n        const camRightLon = camLon + dLonLP * 180/Math.PI;\r\n        const camLeftLat = camLat + dLatRP * 180/Math.PI;\r\n        const camLeftLon = camLon + dLonRP * 180/Math.PI;\r\n\r\n        const coordinates = [ {y : camLat, x : camLon, z: 0.0}, {y : camRightLat, x : camRightLon, z: 0.0}, {y : camLeftLat, x : camLeftLon, z: 0.0} ]\r\n        this.placeViewCone(coordinates)\r\n      },\r\n\r\n      placeViewCone: function(coords){\r\n        // console.log('placeViewCone is running');\r\n        const self = this;\r\n        const viewTriangle = {\r\n          type: this.ipa.SHAPE_TYPE.POLYGON,\r\n          coordinates: coords,\r\n          // coordinates : [ {y : app.state.stViewY, x : app.state.stViewX, z: 0.0}, {y : app.state.viewCone.camRightLat, x : app.state.viewCone.camRightLon, z: 0.0}, {y : app.state.viewCone.camLeftLat, x : app.state.viewCone.camLeftLon, z: 0.0} ],\r\n          strokeColor: \"#00a0ee\",\r\n          strokeOpacity: 0.75,\r\n          strokeWeight: 2,\r\n          fillColor: \"#00a0ee\",\r\n          fillOpacity: 0.25,\r\n          altitudeMode: this.ipa.ALTITUDE_MODE.RELATIVE_TO_GROUND\r\n        };\r\n        this.ipa.addShapes([viewTriangle], function(result) {\r\n          for ( var i = 0; i < result.length; i++) {\r\n            if ( result[i].success === 'false' ) {\r\n              alert(result[i].error);\r\n            } else {\r\n              const shapeIds = self.$store.state.pictometry.shapeIds;\r\n              // console.log('shapeIds:', shapeIds);\r\n              // console.log('current shapeId:', result[i].shapeId);\r\n              shapeIds.push(result[i].shapeId);\r\n              const test = shapeIds.slice(0, -1)\r\n              // console.log('slice', test);\r\n              self.ipa.removeShapes(shapeIds.slice(0, -1));\r\n            }\r\n          }\r\n        });\r\n      },\r\n    }\r\n  };\r\n</script>\r\n","import mod from \"-!../../../../cache-loader/dist/cjs.js??ref--12-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../vue-loader/lib/index.js??vue-loader-options!./ViewCone.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../cache-loader/dist/cjs.js??ref--12-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../vue-loader/lib/index.js??vue-loader-options!./ViewCone.vue?vue&type=script&lang=js&\""],"sourceRoot":""}